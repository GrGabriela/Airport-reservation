-- Generated by Oracle SQL Developer Data Modeler 22.2.0.165.1149
--   at:        2022-11-23 16:07:59 EET
--   site:      Oracle Database 12c
--   type:      Oracle Database 12c



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE
----------------tabela 1-airport-------------

CREATE TABLE airport (
    airport_id NUMBER(2) NOT NULL,
    name       VARCHAR2(20) NOT NULL,
    country    VARCHAR2(20) NOT NULL,
    city       VARCHAR2(20) NOT NULL
);

ALTER TABLE airport
    ADD CONSTRAINT x_name_ck CHECK ( length(name) >= 2
                                     AND REGEXP_LIKE ( name,
                                                       '^[a-zA-Z]*$' ) );

ALTER TABLE airport
    ADD CONSTRAINT x_country_ck CHECK ( length(country) >= 2
                                        AND REGEXP_LIKE ( country,
                                                          '^[a-zA-Z]*$' ) );

ALTER TABLE airport
    ADD CONSTRAINT x_city_ck CHECK ( length(city) >= 2
                                     AND REGEXP_LIKE ( city,
                                                       '^[a-zA-Z]*$' ) );

ALTER TABLE airport ADD CONSTRAINT airport_pk PRIMARY KEY ( airport_id );

ALTER TABLE airport ADD CONSTRAINT airport_name_un UNIQUE ( name );


------------------tabela 2-passenger-------------
CREATE TABLE passenger (
    p_id         NUMBER(2) NOT NULL,
    first_name   VARCHAR2(20) NOT NULL,
    middle_name  VARCHAR2(20),
    last_name    VARCHAR2(20) NOT NULL,
    email        VARCHAR2(30),
    phone_number VARCHAR2(10) NOT NULL
);
ALTER TABLE passenger
    ADD CONSTRAINT x_first_name_ck CHECK ( length(first_name) >= 2
                                           AND REGEXP_LIKE ( first_name,
                                                             '^[a-zA-Z]*$' ) );


ALTER TABLE passenger
    ADD CONSTRAINT x_middle_name_ck CHECK ( length(middle_name) >= 2
                                            AND REGEXP_LIKE ( middle_name,
                                                              '^[a-zA-Z]*$' ) );

ALTER TABLE passenger
    ADD CONSTRAINT x_last_name_ck CHECK ( length(last_name) >= 2
                                          AND REGEXP_LIKE ( last_name,
                                                            '^[a-zA-Z]*$' ) );

ALTER TABLE passenger
    ADD CONSTRAINT x_email_ck CHECK ( REGEXP_LIKE ( email,
                                                    '[a-z0-9._%-]+@[a-z0-9._%-]+\.[a-z]{2,4}' ) );

ALTER TABLE passenger
    ADD CONSTRAINT x_phone_number_ck CHECK ( length(phone_number) = 10
                                             AND REGEXP_LIKE ( phone_number,
                                                               '^[0][:7:3:2][0-9 ]*$' ) );

ALTER TABLE passenger ADD CONSTRAINT passenger_pk PRIMARY KEY ( p_id );

ALTER TABLE passenger ADD CONSTRAINT passenger_email_un UNIQUE ( email );

ALTER TABLE passenger ADD CONSTRAINT passenger_phone_number_un UNIQUE ( phone_number );


---------------tabela 3-passport-------------------

CREATE TABLE passport (
    pass_id NUMBER(2) NOT NULL,
    pass_nr VARCHAR2(9) NOT NULL,
    p_id NUMBER(2) NOT NULL
);

CREATE UNIQUE INDEX passport__idx ON
    passport (
        p_id
    ASC );

ALTER TABLE passport ADD CONSTRAINT passport_pk PRIMARY KEY ( pass_id );

ALTER TABLE passport ADD CONSTRAINT passport_pass_nr_un UNIQUE ( pass_nr );


----------tabela 4-flight-----------------

CREATE TABLE flight (
    flight_id      NUMBER(2) NOT NULL,
    departure_date DATE NOT NULL,
    arrival_date   DATE NOT NULL,
    capacity       NUMBER(2) NOT NULL,
    available      NUMBER(2) NOT NULL,
    airport_id     NUMBER(2) NOT NULL,
    airport_id1    NUMBER(2) NOT NULL
);

ALTER TABLE flight ADD CONSTRAINT x_arrival_date_ck CHECK ( arrival_date > departure_date );

ALTER TABLE flight ADD CONSTRAINT x_capacity_ck CHECK ( capacity >= 10 );

ALTER TABLE flight
    ADD CONSTRAINT x_available_ck CHECK ( available <= capacity
                                          AND available >= 0 );

ALTER TABLE flight ADD CONSTRAINT flight_pk PRIMARY KEY ( flight_id );

ALTER TABLE flight ADD CONSTRAINT x_id_aiport_ck check(airport_id!=airport_id1);

-----tabela 5-booking-----------------

CREATE TABLE booking (
    ticket_id NUMBER(2) NOT NULL,
    seat_nr   NUMBER(2) NOT NULL,
    p_id      NUMBER(2) NOT NULL,
    flight_id NUMBER(2) NOT NULL
);

ALTER TABLE booking
    ADD CONSTRAINT seat_nr_ck CHECK ( seat_nr BETWEEN 1 AND 10 );

ALTER TABLE booking ADD CONSTRAINT booking_pk PRIMARY KEY ( ticket_id );

------------constrangeri de tip foreign key---------------


ALTER TABLE booking
    ADD CONSTRAINT booking_flight_fk FOREIGN KEY ( flight_id )
        REFERENCES flight ( flight_id );

ALTER TABLE booking
    ADD CONSTRAINT booking_passenger_fk FOREIGN KEY ( p_id )
        REFERENCES passenger ( p_id );

ALTER TABLE flight
    ADD CONSTRAINT flight_airport_fk FOREIGN KEY ( airport_id1 )
        REFERENCES airport ( airport_id );

ALTER TABLE flight
    ADD CONSTRAINT flight_airport_fkv2 FOREIGN KEY ( airport_id )
        REFERENCES airport ( airport_id );

ALTER TABLE passport
    ADD CONSTRAINT passport_passenger_fk FOREIGN KEY ( p_id )
        REFERENCES passenger ( p_id );

-----------triggere pentru autoincrement------------
CREATE SEQUENCE airport_airport_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER airport_airport_id_trg BEFORE
    INSERT ON airport
    FOR EACH ROW
    WHEN ( new.airport_id IS NULL )
BEGIN
    :new.airport_id := airport_airport_id_seq.nextval;
END;
/

CREATE SEQUENCE booking_ticket_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER booking_ticket_id_trg BEFORE
    INSERT ON booking
    FOR EACH ROW
    WHEN ( new.ticket_id IS NULL )
BEGIN
    :new.ticket_id := booking_ticket_id_seq.nextval;
END;
/

CREATE SEQUENCE class_class_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER class_class_id_trg BEFORE
    INSERT ON class
    FOR EACH ROW
    WHEN ( new.class_id IS NULL )
BEGIN
    :new.class_id := class_class_id_seq.nextval;
END;
/

CREATE SEQUENCE flight_flight_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER flight_flight_id_trg BEFORE
    INSERT ON flight
    FOR EACH ROW
    WHEN ( new.flight_id IS NULL )
BEGIN
    :new.flight_id := flight_flight_id_seq.nextval;
END;
/

CREATE SEQUENCE passenger_p_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER passenger_p_id_trg BEFORE
    INSERT ON passenger
    FOR EACH ROW
    WHEN ( new.p_id IS NULL )
BEGIN
    :new.p_id := passenger_p_id_seq.nextval;
END;
/

CREATE SEQUENCE passport_pass_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER passport_pass_id_trg BEFORE
    INSERT ON passport
    FOR EACH ROW
    WHEN ( new.pass_id IS NULL )
BEGIN
    :new.pass_id := passport_pass_id_seq.nextval;
END;
/

-------------trigere pentru actualizare locurilor disponibile----------------

CREATE OR REPLACE TRIGGER actualizare_anulare_rezervare 
    BEFORE DELETE ON Booking 
    FOR EACH ROW 
begin
update Flight set Flight.Available=Flight.Available+:old.Seat_nr
where Flight.Flight_id=:old.Flight_id;
end; 
/

CREATE OR REPLACE TRIGGER actualizare_rezervare 
    AFTER INSERT ON Booking 
    FOR EACH ROW 
begin
update Flight set Flight.Available=Flight.Available-:new.Seat_nr
where Flight.Flight_id=:new.Flight_id;
end; 
/

CREATE OR REPLACE TRIGGER Available_initial 
    BEFORE INSERT ON Flight 
    FOR EACH ROW 
when (new.Available IS null)
begin
:new.Available:=:new.Capacity;
end; 
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             6
-- CREATE INDEX                             1
-- ALTER TABLE                             32
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           3
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- TSDP POLICY                              0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
